///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback),
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}

///
/// Output a loop of declarations from a Sass map
///
/// @author Hugo Giraudel (@hugogiraudel)
///
/// @param {Map}   $defaults  - Map of default declarations
/// @param {Map}   $custom    - Map of custom declarations (merged with, and overwriting defaults)
///
/// @example scss - set default <h1> text styling and allow
///  user to overwrite in declarations in their own map.
///
///   in user custom theme:
///
///   $h1-styles-custom: (
///     'color': null,
///     'line-height': 2,
///
///     ':hover, :active': (
///       color: purple
///     )
///   );
///
///   in default theme:
///
///   $h1-styles-defaults: (
///     'color': red,
///     'text-transform': uppercase,
///     'line-height': 1.5
///   ) !default;
///
///   in component:
///
///   h1 {
///     @include map-css($h1-styles-defaults, $h1-styles-custom);
///   }
///
@mixin map-declarations($defaults, $custom: ()) {
  $declarations: map-merge($defaults, $custom);

  @each $property, $value in $declarations {
    @if (type-of($value) == 'map') {
      @at-root #{selector-append(&, $property)} {
        @include css($value);
      }
    } @else {
      #{$property}: unquote($value);
    }
  }
}
